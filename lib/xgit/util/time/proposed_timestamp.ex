defmodule Xgit.Util.Time.ProposedTimestamp do
  @moduledoc ~S"""
  A timestamp generated by `MonotonicClock`.

  PORTING NOTE: For now, we are not implementing network protocols related to
  time, but implementing just enough of the abstraction to allow that to be
  implemented later.

  The ability to block until the timestamp has passed is not yet implemented.
  """

  defprotocol Impl do
    @moduledoc ~S"""
    An implementation strategy for `ProposedTimestamp`.

    We mostly use this for testing to replace actual delays with mimiced delays.
    """

    @doc ~S"""
    Get time since epoch in microseconds.

    This is typically the same as
    [`System.os_time(:microsecond)`](https://hexdocs.pm/elixir/System.html#os_time/1).
    """
    @spec read(timestamp :: term) :: integer
    def read(timestamp)
  end

  @doc ~S"""
  Read the timestamp as `unit` since the epoch.

  Units are as defined by the
  [`System.time_unit` type](https://hexdocs.pm/elixir/System.html#t:time_unit/0),
  except that `:nanosecond` is not supported.
  """
  def read(timestamp, :microsecond), do: read(timestamp, 1)
  def read(timestamp, :millisecond), do: read(timestamp, 1000)
  def read(timestamp, :second), do: read(timestamp, 1_000_000)

  def read(timestamp, unit) when is_integer(unit) and unit > 0 do
    timestamp
    |> __MODULE__.Impl.read()
    |> Kernel.div(unit)
  end
end
